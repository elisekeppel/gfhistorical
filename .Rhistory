blob[["gfbdat"]] = gfbdat
## ------------------------------------------------------------
## Wrap up the fisheries and survey landings into a list object
## ------------------------------------------------------------
eval(parse(text=paste0("dbdat=\"cat",strSpp,"dat\"")))
expr=paste0(dbdat,"=blob; save(\"",dbdat,"\",file=\"",dbdat,".rda\")")
eval(parse(text=expr))
##-----Stop querying the databases-----
}
.flush.cat("Start querying the DFO databases:\n")
blob = list()
if (isThere("PBSdat")) rm(PBSdat) ## remove from current environment
uid=rep(uid,2)[1:2]; pwd=rep(pwd,2)[1:2]
if (file.exists(paste0(dpath,"/ph3dat.rda")) && !sql.force)
load(paste0(dpath,"/ph3dat.rda"))
else {
.flush.cat("   Oracle -- PacHarv3 (table CATCH_SUMMARY);\n")
getData("ph3_fcatORF.sql",dbName="HARVEST_V2_0",strSpp=strSpp,path=spath,
server="ORAPROD",type="ORA",trusted=FALSE,uid=uid[1],pwd=pwd[1],tenv=penv())
assign("ph3dat",PBSdat);  rm(PBSdat) ## just to be safe
dimnames(ph3dat)[[1]]=1:nrow(ph3dat)
save("ph3dat",file="ph3dat.rda")
}
.flush.cat("Start querying the DFO databases:\n")
blob = list()
if (isThere("PBSdat")) rm(PBSdat) ## remove from current environment
uid=rep(uid,2)[1:2]; pwd=rep(pwd,2)[1:2]
## -----------------------------------------------------------------------------
## Start querying the databases
## PacHarv3 catch summary for fids 1:5 and 0 (unknown)
## Note: only used for h&l fisheries (2,4,5) as GFCATCH contains trawl and trap.
## -----------------------------------------------------------------------------
if (file.exists(paste0(dpath,"/ph3dat.rda")) && !sql.force)
load(paste0(dpath,"/ph3dat.rda"))
blob[["ph3dat"]] = ph3dat
if (useGFM) {
## ------------------------------------------------------------------------------------------------------
## GFFOS merged catch from all fisheries (fid=1:5)
## GF_MERGED_CATCH table contains records from GFBio, GFCatch, GFFOS, PacHarvest, PacHarvHL, PacHarvSable
## ------------------------------------------------------------------------------------------------------
if (file.exists(paste0(dpath,"/gfmdat.rda")) && !sql.force)
load(paste0(dpath,"/gfmdat.rda"))
else {
.flush.cat("   SQL Server -- GFFOS (table GF_MERGED_CATCH) [takes a few minutes];\n")
getData("fos_mcatORF.sql","GFFOS",strSpp=strSpp,path=spath,tenv=penv())  ####HERE : what data come in from gfmc?
PBSdat$Y[round(PBSdat$Y,5)==0] = NA
PBSdat$X[round(PBSdat$X,5)==0] = NA
PBSdat = calcStockArea(strSpp,PBSdat)
assign("gfmdat",PBSdat); rm(PBSdat) ## just to be safe
save("gfmdat",file="gfmdat.rda")
}
blob[["gfmdat"]] = gfmdat
}
## -----------------------------------------------------------------------------
## Get the survey catches which will be added to the combined catch near the end
## -----------------------------------------------------------------------------
if (file.exists(paste0(dpath,"/gfbdat.rda")) && file.exists(paste0(dpath,"/gfbcat.rda")) && !sql.force) {
load(paste0(dpath,"/gfbdat.rda"))
load(paste0(dpath,"/gfbcat.rda"))
} else {
.flush.cat("   SQL Server -- GFBioSQL (surveys).\n")
gfbcat = surveyCatch(strSpp=strSpp, hadley=hadley)
getFile(gfbdat)
}
blob[["gfbdat"]] = gfbdat
## ------------------------------------------------------------
## Wrap up the fisheries and survey landings into a list object
## ------------------------------------------------------------
eval(parse(text=paste0("dbdat=\"cat",strSpp,"dat\"")))
expr=paste0(dbdat,"=blob; save(\"",dbdat,"\",file=\"",dbdat,".rda\")")
eval(parse(text=expr))
if (!useSM){
.flush.cat("Removing seamount records ...\n")
nSMrec=as.list(rep(0,length(fnam))); names(nSMrec)=fnam; tSMcat=nSMrec
for (i in fnam){
eval(parse(text=paste0("idat = zapSeamounts(",i,")")))
SMrem = attributes(idat)$SMrem
if (!is.null(SMrem)) {
nSMrec[[i]] = SMrem[,,"nrec"]
tSMcat[[i]] = SMrem[,,"tcat"]
}
assign(i,idat)
}
packList(c("nSMrec","tSMcat"),"PBStool",tenv=.PBStoolEnv)
.flush.cat("Removing seamount records ...\n")
nSMrec=as.list(rep(0,length(fnam))); names(nSMrec)=fnam; tSMcat=nSMrec
for (i in fnam){
eval(parse(text=paste0("idat = zapSeamounts(",i,")")))
SMrem = attributes(idat)$SMrem
if (!is.null(SMrem)) {
nSMrec[[i]] = SMrem[,,"nrec"]
tSMcat[[i]] = SMrem[,,"tcat"]
}
assign(i,idat)
}
packList(c("nSMrec","tSMcat"),"PBStool",tenv=.PBStoolEnv)
for (i in setdiff(fnam,"gfbdat")){
eval(parse(text=paste0("idat = ",i)))
idat$TRF = idat$ORF + idat$POP
if (!is.element("year",names(idat)) & is.element("date",names(idat)))
idat$year = as.numeric(substring(idat$date,1,4))
assign(i,idat)
}
.flush.cat(paste0("Removing Lanagara Spit trawl catch of ",orfSpp," ...\n"))
for (i in setdiff(fnam,"gfbdat")){
eval(parse(text=paste0("idat = ",i)))
isTY = is.element(idat$fid,1) & is.element(idat$year,1983:1993) ## Langara Spit experiment years (from Leaman and IFMPs)
isLS = (is.element(idat$major,8) & is.element(idat$minor,3) & is.element(idat$locality,3)) |
(is.element(idat$major,9) & is.element(idat$minor,35) & is.element(idat$locality,c(1,2,4:7)))
if (any(isTY & isLS)) {
LSdat = idat[isTY & isLS,]
LScat = sapply(split(LSdat[,orfSpp],LSdat$year),sum,na.rm=TRUE)/1000.
idat[isTY & isLS, orfSpp] = 0.
} else LScat="none"
attr(idat,paste0("LScat.rm",orfSpp)) = LScat
#if (i=="gfmdat") {browser();return()}
assign(i,idat)
}
packList(c("LScat"),"PBStool",tenv=.PBStoolEnv)
}
.flush.cat("Changing Anthony Is. catch (PMFC 5E south of 52.3333) to PMFC 5C catch...\n")
if ("gfmdat"%in%fnam) {
i = "gfmdat"
eval(parse(text=paste0("idat = ",i)))
ai1 = is.element(idat$major,9) & is.element(idat$stock,"5ABC")
ai2 = is.element(idat$major,9) & is.element(idat$minor,34) & is.element(idat$locality,c(1,5))
#browser();return()
idat$major[ai1 | ai2] = 7 ## 5C
assign(i,idat)
}
if (file.exists(paste0(datDir,"/gfbcat.rda")))
load(paste0(datDir,"/gfbcat.rda"))
else
gfbcat = surveyCatch(strSpp=strSpp, gfbdat=gfbdat, hadley=hadley)
.flush.cat("   PacHarv3 records ...\n")
ph3cat = as.data.frame(t(apply(ph3dat,1,function(x){
ufos=c("POP","PAH","SBF","DOG","RFA"); ufid=1:5; names(ufid)=ufos
f = x["fid"]
if (f==0) {
z = x[ufos]==max(x[ufos],na.rm=TRUE)
utar = ufos[z][1]
fid = ufid[utar]
ucat = x[utar]
}
else {
fid=f
ucat=x[ufos[f]]
}
out = c(x["year"],fid,date=as.Date(paste0(x["year"],"-07-01")),
x[c("major","minor","landed","discard","POP","ORF")],ucat)
return(out) } )))
names(ph3cat) = c("year",keep)
ph3cat$date = as.Date(paste0(ph3cat$year,"-07-01"))
ph3cat = ph3cat[,-1] ## get rid of 'year'
save("ph3cat",file=paste0(datDir,"/ph3cat.rda"))
if (useGFM){
.flush.cat("   GFFOS merged catch ...\n")
dbs = c("ph3cat","gfmcat")
## ------------------------------------------------------
## Databases to compare and merge (using maximum)
## drop PacHarv3 for Trawl and Trap (see Rutherford 1999)
## ------------------------------------------------------
dbmerge = list(
trawl     = c("gfmcat"),
halibut   = c("ph3cat","gfmcat"),
sablefish = c("gfmcat"),
doglingi  = c("ph3cat","gfmcat"),
hlrocks   = c("ph3cat","gfmcat"))
## Databases that are strictly additive (e.g., J-V Hake, but already in merged catch table)
## ----------------------------------------------------------------------------------------
dbadd = list (trawl=NULL, halibut=NULL, sablefish=NULL, dogling=NULL, hlrocks=NULL)
gfmcat = gfmdat[,keep]
trash  = apply(gfmcat[,cflds],1,function(x){all(x==0)})
gfmcat = gfmcat[!trash,]; dimnames(gfmcat)[[1]]=1:nrow(gfmcat)
save("gfmcat",file=paste0(datDir,"/gfmcat.rda"))
#browser();return()
}
modyrs = majmod = fid = NULL
for (i in dbs) {
if(!isThere(i,envir=lenv)) next
icat = get(i)
modyrs = c(modyrs,.su(as.numeric(substring(icat$date,1,4))))
majmod = c(majmod,.su(icat$major))
fid=c(fid,unique(icat$fid)) }
modyrs = .su(modyrs); majmod=.su(majmod); fid=.su(fid)
modyrs = modyrs[is.element(modyrs,1945:sysyr)]
if (isThere("refyrs") && !is.null(refyrs) && length(intersect(refyrs,modyrs))==0)
showError("refyrs","nodata")
MODYRS = modyrs[1]:modyrs[length(modyrs)]
## -------------------------------------------------------------
## Need to reconcile majors (remove concept of reference majors)
## -------------------------------------------------------------
majmax=intersect(majhis,majmod)  ## maximum available overlap in majors from data
if (is.null(major)) {
MM.avail = majmax
major = c(1,3:9)
}
else
najhis
majhis
majmod
majmax
major
catmod0=array(0,dim=c(length(MODYRS),length(majmod),length(fid),length(Cflds),length(dbs)),
dimnames=list(year=MODYRS,major=majmod,fid=fid,catch=Cflds,dbs=dbs))
glimpse(catmod)
library(dplyr)
glimpse(catmod)
glimpse(catmod0)
str(catmod0)
catmod0(1)
dimnames(catmod(1))
catmod0[66,3,1,6,2]
catmod0[65,3,1,6,2]
catmod0[60,3,1,6,2]
catmod0[60,2,1,6,2]
catmod0[60,3,1,6,2]
catmod0[60,4,1,6,2]
catmod0[60,5,1,6,2]
catmod0[60,9,1,6,2]
catmod0[59,9,1,6,2]
catmod0[49,9,1,6,2]
get_beta <- function(dat = ref_catch) {
test <- ref_catch %>%
filter(fishery_sector %in% c(2, 4, 5))
group_by(fishery_sector) %>%
mutate(sum_rrf_kg = sum(rrf_kg)) %>%
ungroup() %>%
mutate(beta = rrf_kg/sum_rrf_kg) %>%
select(-sum_rrf_kg)
}
test <- ref_catch %>%
filter(fishery_sector %in% c(2, 4, 5))
group_by(fishery_sector) %>%
mutate(sum_rrf_kg = sum(rrf_kg)) %>%
ungroup() %>%
mutate(beta = rrf_kg/sum_rrf_kg) %>%
select(-sum_rrf_kg)
depths <- gfdata::runsql("GFBIO", "SELECT SURVEY_SERIES_ID
,count([FE_BEGINNING_BOTTOM_DEPTH]) BEGIN_BOTTOM
, count([FE_END_BOTTOM_DEPTH]) END_BOTTOM
, count([FE_MODAL_BOTTOM_DEPTH]) MODAL_BOTTOM
, count([FE_MIN_BOTTOM_DEPTH]) MIN_BOTTOM
, count([FE_MAX_BOTTOM_DEPTH]) MAX_BOTTOM
, count([FE_BEGINNING_GEAR_DEPTH]) GEAR_BEGINNING
, count([FE_END_GEAR_DEPTH]) GEAR_END
, count([FE_MODAL_GEAR_DEPTH]) GEAR_MODAL
, count([FE_MIN_GEAR_DEPTH]) GEAR_MIN
, count([FE_MAX_GEAR_DEPTH]) GEAR_MAX
, count([FE_BOTTOM_WATER_TEMP_DEPTH]) BOTTOM_WATER_TEMP_DEPTH
FROM [GFBioSQL].[dbo].[FISHING_EVENT] FE
INNER JOIN TRIP_SURVEY TS ON TS.TRIP_ID = FE.TRIP_ID
INNER JOIN SURVEY S ON S.SURVEY_ID = TS.SURVEY_ID
WHERE SURVEY_SERIES_ID IN (39,40)
GROUP BY SURVEY_SERIES_ID")
depths <- gfdata:::runsql("GFBIO", "SELECT SURVEY_SERIES_ID
,count([FE_BEGINNING_BOTTOM_DEPTH]) BEGIN_BOTTOM
, count([FE_END_BOTTOM_DEPTH]) END_BOTTOM
, count([FE_MODAL_BOTTOM_DEPTH]) MODAL_BOTTOM
, count([FE_MIN_BOTTOM_DEPTH]) MIN_BOTTOM
, count([FE_MAX_BOTTOM_DEPTH]) MAX_BOTTOM
, count([FE_BEGINNING_GEAR_DEPTH]) GEAR_BEGINNING
, count([FE_END_GEAR_DEPTH]) GEAR_END
, count([FE_MODAL_GEAR_DEPTH]) GEAR_MODAL
, count([FE_MIN_GEAR_DEPTH]) GEAR_MIN
, count([FE_MAX_GEAR_DEPTH]) GEAR_MAX
, count([FE_BOTTOM_WATER_TEMP_DEPTH]) BOTTOM_WATER_TEMP_DEPTH
FROM [GFBioSQL].[dbo].[FISHING_EVENT] FE
INNER JOIN TRIP_SURVEY TS ON TS.TRIP_ID = FE.TRIP_ID
INNER JOIN SURVEY S ON S.SURVEY_ID = TS.SURVEY_ID
WHERE SURVEY_SERIES_ID IN (39,40)
GROUP BY SURVEY_SERIES_ID")
depths <- gfdata:::run_sql("GFBIO", "SELECT SURVEY_SERIES_ID
,count([FE_BEGINNING_BOTTOM_DEPTH]) BEGIN_BOTTOM
, count([FE_END_BOTTOM_DEPTH]) END_BOTTOM
, count([FE_MODAL_BOTTOM_DEPTH]) MODAL_BOTTOM
, count([FE_MIN_BOTTOM_DEPTH]) MIN_BOTTOM
, count([FE_MAX_BOTTOM_DEPTH]) MAX_BOTTOM
, count([FE_BEGINNING_GEAR_DEPTH]) GEAR_BEGINNING
, count([FE_END_GEAR_DEPTH]) GEAR_END
, count([FE_MODAL_GEAR_DEPTH]) GEAR_MODAL
, count([FE_MIN_GEAR_DEPTH]) GEAR_MIN
, count([FE_MAX_GEAR_DEPTH]) GEAR_MAX
, count([FE_BOTTOM_WATER_TEMP_DEPTH]) BOTTOM_WATER_TEMP_DEPTH
FROM [GFBioSQL].[dbo].[FISHING_EVENT] FE
INNER JOIN TRIP_SURVEY TS ON TS.TRIP_ID = FE.TRIP_ID
INNER JOIN SURVEY S ON S.SURVEY_ID = TS.SURVEY_ID
WHERE SURVEY_SERIES_ID IN (39,40)
GROUP BY SURVEY_SERIES_ID")
depths <- gfdata:::run_sql("GFBioSQL", "SELECT SURVEY_SERIES_ID
,count([FE_BEGINNING_BOTTOM_DEPTH]) BEGIN_BOTTOM
, count([FE_END_BOTTOM_DEPTH]) END_BOTTOM
, count([FE_MODAL_BOTTOM_DEPTH]) MODAL_BOTTOM
, count([FE_MIN_BOTTOM_DEPTH]) MIN_BOTTOM
, count([FE_MAX_BOTTOM_DEPTH]) MAX_BOTTOM
, count([FE_BEGINNING_GEAR_DEPTH]) GEAR_BEGINNING
, count([FE_END_GEAR_DEPTH]) GEAR_END
, count([FE_MODAL_GEAR_DEPTH]) GEAR_MODAL
, count([FE_MIN_GEAR_DEPTH]) GEAR_MIN
, count([FE_MAX_GEAR_DEPTH]) GEAR_MAX
, count([FE_BOTTOM_WATER_TEMP_DEPTH]) BOTTOM_WATER_TEMP_DEPTH
FROM [GFBioSQL].[dbo].[FISHING_EVENT] FE
INNER JOIN TRIP_SURVEY TS ON TS.TRIP_ID = FE.TRIP_ID
INNER JOIN SURVEY S ON S.SURVEY_ID = TS.SURVEY_ID
WHERE SURVEY_SERIES_ID IN (39,40)
GROUP BY SURVEY_SERIES_ID")
write.csv(depths, "Desktop/hbll_depths.csv")
# tell it where to save
save_location <- "C:\data\Data requests\HBLL survey data for Dana"
# tell it where to save
save_location <- "C:/data\Data requests/HBLL survey data for Dana"
# tell it where to save
save_location <- "C:/data/Data requests/HBLL survey data for Dana"
write.csv(depths, paste0(save_location, "/hbll_depths.csv")
write.csv(depths, paste0(save_location, "/hbll_depths.csv"))
depths <- gfdata:::run_sql("GFBioSQL", "SELECT [TRIP_ID]
,[FISHING_EVENT_ID]
,[FE_BEGINNING_BOTTOM_DEPTH]
,[FE_END_BOTTOM_DEPTH]
,[FE_MODAL_BOTTOM_DEPTH]
,[FE_MIN_BOTTOM_DEPTH]
,[FE_MAX_BOTTOM_DEPTH]
,[FE_BEGIN_TARGET_DEPTH]
,[FE_END_TARGET_DEPTH]
,[FE_MIN_TARGET_DEPTH]
,[FE_MAX_TARGET_DEPTH]
,[FE_MODAL_TARGET_DEPTH]
,[FE_BEGIN_CAPTURE_DEPTH]
,[FE_END_CAPTURE_DEPTH]
,[FE_MIN_CAPTURE_DEPTH]
,[FE_MAX_CAPTURE_DEPTH]
,[FE_MODAL_CAPTURE_DEPTH]
,[FE_BEGINNING_GEAR_DEPTH]
,[FE_END_GEAR_DEPTH]
,[FE_MIN_GEAR_DEPTH]
,[FE_MAX_GEAR_DEPTH]
,[FE_MODAL_GEAR_DEPTH]
,[FE_SURFACE_WATER_TEMP_DEPTH]
FROM [GFBioSQL].[dbo].[FISHING_EVENT]")
depths <- gfdata:::run_sql("GFBioSQL", "SELECT [TRIP_ID]
,[FISHING_EVENT_ID]
,[FE_BEGINNING_BOTTOM_DEPTH]
,[FE_END_BOTTOM_DEPTH]
,[FE_MODAL_BOTTOM_DEPTH]
,[FE_MIN_BOTTOM_DEPTH]
,[FE_MAX_BOTTOM_DEPTH]
,[FE_BEGIN_TARGET_DEPTH]
,[FE_END_TARGET_DEPTH]
,[FE_MIN_TARGET_DEPTH]
,[FE_MAX_TARGET_DEPTH]
,[FE_MODAL_TARGET_DEPTH]
,[FE_BEGIN_CAPTURE_DEPTH]
,[FE_END_CAPTURE_DEPTH]
,[FE_MIN_CAPTURE_DEPTH]
,[FE_MAX_CAPTURE_DEPTH]
,[FE_MODAL_CAPTURE_DEPTH]
,[FE_BEGINNING_GEAR_DEPTH]
,[FE_END_GEAR_DEPTH]
,[FE_MIN_GEAR_DEPTH]
,[FE_MAX_GEAR_DEPTH]
,[FE_MODAL_GEAR_DEPTH]
,[FE_SURFACE_WATER_TEMP_DEPTH]
FROM [GFBioSQL].[dbo].[FISHING_EVENT] FE
INNER JOIN TRIP_SURVEY TS ON TS.TRIP_ID = FE.TRIP_ID
INNER JOIN SURVEY S ON S.SURVEY_ID = TS.SURVEY_ID
WHERE SURVEY_SERIES_ID IN (39,40)
GROUP BY SURVEY_SERIES_ID")
depths <- gfdata:::run_sql("GFBioSQL", "SELECT
[FISHING_EVENT_ID]
,[FE_BEGINNING_BOTTOM_DEPTH]
,[FE_END_BOTTOM_DEPTH]
,[FE_MODAL_BOTTOM_DEPTH]
,[FE_MIN_BOTTOM_DEPTH]
,[FE_MAX_BOTTOM_DEPTH]
,[FE_BEGIN_TARGET_DEPTH]
,[FE_END_TARGET_DEPTH]
,[FE_MIN_TARGET_DEPTH]
,[FE_MAX_TARGET_DEPTH]
,[FE_MODAL_TARGET_DEPTH]
,[FE_BEGIN_CAPTURE_DEPTH]
,[FE_END_CAPTURE_DEPTH]
,[FE_MIN_CAPTURE_DEPTH]
,[FE_MAX_CAPTURE_DEPTH]
,[FE_MODAL_CAPTURE_DEPTH]
,[FE_BEGINNING_GEAR_DEPTH]
,[FE_END_GEAR_DEPTH]
,[FE_MIN_GEAR_DEPTH]
,[FE_MAX_GEAR_DEPTH]
,[FE_MODAL_GEAR_DEPTH]
,[FE_SURFACE_WATER_TEMP_DEPTH]
FROM [GFBioSQL].[dbo].[FISHING_EVENT] FE
INNER JOIN TRIP_SURVEY TS ON TS.TRIP_ID = FE.TRIP_ID
INNER JOIN SURVEY S ON S.SURVEY_ID = TS.SURVEY_ID
WHERE SURVEY_SERIES_ID IN (39,40)
GROUP BY SURVEY_SERIES_ID")
depths <- gfdata:::run_sql("GFBioSQL", "SELECT
[FISHING_EVENT_ID]
,[FE_BEGINNING_BOTTOM_DEPTH]
,[FE_END_BOTTOM_DEPTH]
,[FE_MODAL_BOTTOM_DEPTH]
,[FE_MIN_BOTTOM_DEPTH]
,[FE_MAX_BOTTOM_DEPTH]
,[FE_BEGIN_TARGET_DEPTH]
,[FE_END_TARGET_DEPTH]
,[FE_MIN_TARGET_DEPTH]
,[FE_MAX_TARGET_DEPTH]
,[FE_MODAL_TARGET_DEPTH]
,[FE_BEGIN_CAPTURE_DEPTH]
,[FE_END_CAPTURE_DEPTH]
,[FE_MIN_CAPTURE_DEPTH]
,[FE_MAX_CAPTURE_DEPTH]
,[FE_MODAL_CAPTURE_DEPTH]
,[FE_BEGINNING_GEAR_DEPTH]
,[FE_END_GEAR_DEPTH]
,[FE_MIN_GEAR_DEPTH]
,[FE_MAX_GEAR_DEPTH]
,[FE_MODAL_GEAR_DEPTH]
,[FE_SURFACE_WATER_TEMP_DEPTH]
FROM [GFBioSQL].[dbo].[FISHING_EVENT] FE
INNER JOIN TRIP_SURVEY TS ON TS.TRIP_ID = FE.TRIP_ID
INNER JOIN SURVEY S ON S.SURVEY_ID = TS.SURVEY_ID
WHERE SURVEY_SERIES_ID IN (39,40)")
names(depths) <- tolower(names(depths))
depths <- depths %>%
summarise(names(depths))
names(depths)
x <- names(depths)
depths <- depths %>%
summarise(d)
depths <- depths %>%
summarise(x)
summarise(sum(!is.null(fishing_event_id))
depths <- depths %>%
summarise(sum(!is.null(fishing_event_id)))
View(depths)
depths <- gfdata:::run_sql("GFBioSQL", "SELECT
[FISHING_EVENT_ID]
,[FE_BEGINNING_BOTTOM_DEPTH]
,[FE_END_BOTTOM_DEPTH]
,[FE_MODAL_BOTTOM_DEPTH]
,[FE_MIN_BOTTOM_DEPTH]
,[FE_MAX_BOTTOM_DEPTH]
,[FE_BEGIN_TARGET_DEPTH]
,[FE_END_TARGET_DEPTH]
,[FE_MIN_TARGET_DEPTH]
,[FE_MAX_TARGET_DEPTH]
,[FE_MODAL_TARGET_DEPTH]
,[FE_BEGIN_CAPTURE_DEPTH]
,[FE_END_CAPTURE_DEPTH]
,[FE_MIN_CAPTURE_DEPTH]
,[FE_MAX_CAPTURE_DEPTH]
,[FE_MODAL_CAPTURE_DEPTH]
,[FE_BEGINNING_GEAR_DEPTH]
,[FE_END_GEAR_DEPTH]
,[FE_MIN_GEAR_DEPTH]
,[FE_MAX_GEAR_DEPTH]
,[FE_MODAL_GEAR_DEPTH]
,[FE_SURFACE_WATER_TEMP_DEPTH]
FROM [GFBioSQL].[dbo].[FISHING_EVENT] FE
INNER JOIN TRIP_SURVEY TS ON TS.TRIP_ID = FE.TRIP_ID
INNER JOIN SURVEY S ON S.SURVEY_ID = TS.SURVEY_ID
WHERE SURVEY_SERIES_ID IN (39,40)")
names(depths) <- tolower(names(depths))
depths_sum <- depths %>%
summarise(sum(!is.null(fishing_event_id)))
depths_sum <- depths %>%
group_by(fishing_event_id) %>%
summarise(sum(!is.null(fishing_event_id)))
?summaise_all
?summarise_all
depths_sum <- depths %>%
group_by(fishing_event_id) %>%
summarise_all(sum(!is.null()))
depths_sum <- depths %>%
summarise_all(sum(!is.null()))
depths_sum <- depths %>%
summarise_all(list(sum = sum(!is.null()))
depths_sum <- depths %>%
summarise_all(list(sum = sum(!is.null())))
depths <- gfdata:::run_sql("GFBioSQL", "SELECT SURVEY_SERIES_ID
,count(FISHING_EVENT_ID) FISHING_EVENT_ID
,count([FE_BEGIN_TARGET_DEPTH]) BEGIN_TARGET
,count([FE_END_TARGET_DEPTH]) END_TARGET
,count([FE_MIN_TARGET_DEPTH]) MIN_TARGET
,count([FE_MAX_TARGET_DEPTH]) MAX_TARGET
,count([FE_MODAL_TARGET_DEPTH]) MODAL_TARGET
,count([FE_BEGIN_CAPTURE_DEPTH]) BEGIN_CAPTURE
,count([FE_END_CAPTURE_DEPTH]) END_CAPTURE
,count([FE_MIN_CAPTURE_DEPTH]) MIN_CAPTURE
,count([FE_MAX_CAPTURE_DEPTH]) MAX_CAPTURE
,count([FE_MODAL_CAPTURE_DEPTH]) MODAL_CAPTURE
,count([FE_BEGINNING_BOTTOM_DEPTH]) BEGIN_BOTTOM
, count([FE_END_BOTTOM_DEPTH]) END_BOTTOM
, count([FE_MODAL_BOTTOM_DEPTH]) MODAL_BOTTOM
, count([FE_MIN_BOTTOM_DEPTH]) MIN_BOTTOM
, count([FE_MAX_BOTTOM_DEPTH]) MAX_BOTTOM
, count([FE_BEGINNING_GEAR_DEPTH]) GEAR_BEGINNING
, count([FE_END_GEAR_DEPTH]) GEAR_END
, count([FE_MODAL_GEAR_DEPTH]) GEAR_MODAL
, count([FE_MIN_GEAR_DEPTH]) GEAR_MIN
, count([FE_MAX_GEAR_DEPTH]) GEAR_MAX
, count([FE_BOTTOM_WATER_TEMP_DEPTH]) BOTTOM_WATER_TEMP_DEPTH
FROM [GFBioSQL].[dbo].[FISHING_EVENT] FE
INNER JOIN TRIP_SURVEY TS ON TS.TRIP_ID = FE.TRIP_ID
INNER JOIN SURVEY S ON S.SURVEY_ID = TS.SURVEY_ID
WHERE SURVEY_SERIES_ID IN (39,40) AND
FE_PARENT_EVENT_ID IS NULL AND
FE_MINOR_LEVEL_ID IS NULL
GROUP BY SURVEY_SERIES_ID")
# tell it where to save
save_location <- "C:/data/Data requests/HBLL survey data for Dana"
write.csv(depths, paste0(save_location, "/hbll_depths.csv"))
